id: eclair
version: 0.7.0
title: Eclair
license: Apache
wrapper-repo: https://github.com/Start9Labs/eclair-wrapper
upstream-repo: https://github.com/ACINQ/eclair
support-site: https://github.com/ACINQ/eclair/issues
marketing-site: https://acinq.co/
release-notes: |-
  - Initial release of Eclair for EmbassyOS
build: ["make"]
description:
  short: "A scala implementation of the Lightning Network."
  long: |
    Eclair (French for Lightning) is a Scala implementation of the Lightning Network.
    This software follows the Lightning Network Specifications (BOLTs). Other implementations include c-lightning, lnd, electrum, and rust-lightning.
assets:
  license: LICENSE
  icon: icon.png
  instructions: instructions.md
  docker-images: image.tar
main:
  type: docker
  image: main
  entrypoint: "docker_entrypoint.sh"
  args: []
  mounts:
    main: /data
    compat: /mnt/assets
  io-format: yaml
  shm-size-mb: 64
health-checks: {}
  # rpc:
  #   name: RPC
  #   success-message: RPC server is alive and listening for commands
  #   type: docker
  #   image: main
  #   system: false
  #   entrypoint: check-rpc.sh
  #   args: []
  #   mounts: {}
  #   io-format: json
  #   inject: true
  # synced:
  #   name: Synced
  #   success-message: Synced to chain and ready to perform on-chain operations
  #   type: docker
  #   image: main
  #   system: false
  #   entrypoint: check-synced.sh
  #   args: []
  #   mounts: {}
  #   io-format: yaml
  #   inject: true
config: ~
  # get:
  #   type: script
  # set:
  #   type: script
properties: ~
  # type: script
volumes:
  main:
    type: data
  compat:
    type: assets
alerts:
  install: |
    READ CAREFULLY! Eclair and the Lightning Network are considered beta software. Please use with caution and do not
    risk more money than you are willing to lose. We encourage frequent backups. If for any reason, you need to restore
    eclair from a backup, your on-chain wallet will be restored, but the money locked up in your channels will be
    stuck in those channels for an indeterminate period of time, if they are returned to you at all. It depends on the
    cooperation of your peers. Choose peers with discretion.
  uninstall: |
    READ CAREFULLY! Uninstalling Eclair will result in permanent loss of data, including its private keys for its
    on-chain wallet and all channel states. Please make a backup if you have any funds in your on-chain wallet or in any
    channels. Recovering from backup will restore your on-chain wallet, but due to the architecture of the Lightning
    Network, your channels cannot be recovered. All your channel funds will be stuck in those channels for an indeterminate
    period of time, and if your peers do not cooperate, they will not be recoverable at all.
  restore: |
    Restoring Eclair will overwrite its current data, including its on-chain wallet and channels. Any channels opened
    since the last backup will be forgotten and may linger indefinitely, and channels contained in the backup will be
    closed and their funds returned to your wallet, assuming your peers choose to cooperate.
interfaces:
  rpc:
    name: RPC Interface
    description: Listens for JSON-RPC commands over HTTP.
    tor-config:
      port-mapping:
        8080: "8080"
    lan-config:
      8080:
        ssl: false
        internal: 8080
    ui: false
    protocols:
      - tcp
      - http
      - json-rpc
  peer:
    name: Peer Interface
    description: Listens for incoming connections from lightning peers.
    tor-config:
      port-mapping:
        9735: "9735"
    ui: false
    protocols:
      - tcp
      - lightning
  rest:
    name: C-Lightning-REST API
    description: C-Lightning-REST is a plugin for Eclair written by the RTL team that exposes an LND-like REST API for C-Lightning.
    tor-config:
      port-mapping:
        3001: "3001"
    lan-config:
      3001:
        ssl: true
        internal: 3001
    ui: false
    protocols:
      - tcp
      - http
dependencies:
  btc-rpc-proxy:
    version: ">=0.3.2.1 <0.4.0"
    requirement:
      type: "opt-out"
      how: Can alternatively use the internal full archival bitcoind node or configure an external bitcoin node.
    description: Used to fetch validated blocks.
    config: ~
      # check:
      #   type: docker
      #   image: compat
      #   system: true
      #   # the compat image will contain a tool to check the config rules against the specified dependency
      #   entrypoint: compat
      #   args:
      #     - dependency
      #     - check
      #     - lnd
      #     - "btc-rpc-proxy"
      #     - /data
      #     - "/mnt/assets/btc-rpc-proxy_config_rules.yaml"
      #   mounts:
      #     compat: /mnt/assets
      #     main: /root/.lnd
      #   io-format: yaml
      # auto-configure:
      #   type: docker
      #   image: compat
      #   # if true, the denoted image is prebuilt and comes stock with EOS
      #   # uncommon: if you want something not prebuilt with EOS, you can bundle multiple docker images into the `image.tar` during the `make` build process
      #   system: true
      #   entrypoint: compat
      #   args:
      #     - dependency
      #     - "auto-configure"
      #     - lnd
      #     - "btc-rpc-proxy"
      #     - /data
      #     - "/mnt/assets/btc-rpc-proxy_config_rules.yaml"
      #   mounts:
      #     compat: /mnt/assets
      #     main: /root/.lnd
      #   io-format: yaml
  bitcoind:
    version: ">=0.21.1.2 <24.0.0"
    requirement:
      type: "opt-out"
      how: Can alternatively configure an external bitcoin node.
    description: Used to subscribe to new block events.
    config: ~
      # check:
      #   type: docker
      #   image: compat
      #   system: true
      #   entrypoint: compat
      #   args:
      #     - dependency
      #     - check
      #     - lnd
      #     - bitcoind
      #     - /root/.lnd
      #     - "/mnt/assets/bitcoind_config_rules.yaml"
      #   mounts:
      #     compat: /mnt/assets
      #     main: /root/.lnd
      #   io-format: yaml
      # auto-configure:
      #   type: docker
      #   image: compat
      #   system: true
      #   entrypoint: compat
      #   args:
      #     - dependency
      #     - "auto-configure"
      #     - lnd
      #     - bitcoind
      #     - /root/.lnd
      #     - "/mnt/assets/bitcoind_config_rules.yaml"
      #   mounts:
      #     compat: /mnt/assets
      #     main: /root/.lnd
      #   io-format: yaml
backup:
  create:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - create
      - /mnt/backup
      - /data
    mounts:
      BACKUP: /mnt/backup
      main: /data
  restore:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - restore
      - /mnt/backup
      - /data
    mounts:
      BACKUP: /mnt/backup
      main: /data
migrations:
  from:
    ">=0.7.0":
      type: docker
      image: main
      system: false
      entrypoint: "/bin/echo"
      args: ['{"configured": true}']
      io-format: json
      inject: false
  to:
    ">=0.7.0":
      type: docker
      image: main
      system: false
      entrypoint: "/bin/echo"
      args: ['{"configured": true}']
      io-format: json
      inject: false